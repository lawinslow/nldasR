install.packages('roxygen2')
library(nldasR)
library(httr)
pf_vars = c('APCPsfc', 'DLWRFsfc', 'DSWRFsfc', 'PEVAPsfc', 'SPFH2m', 'TMP2m', 'UGRD10m', 'VGRD10m')
url_pattern = paste0('https://hydro1.gesdisc.eosdis.nasa.gov/daac-bin/access/timeseries.cgi?',
'variable=NLDAS:NLDAS_FORA0125_H.002:%s&location=GEOM:POINT(%g,%%20%g)&startDate=%s&endDate=%s&type=asc2')
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, sep=' ', fill=TRUE)
names(d) = c('datetime', var)
}
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, sep=' ', fill=TRUE)
names(d) = c('datetime', var)
return(d)
}
d_list = lapply(pf_vars, dl_parse)
lon = -89
lat = 44
start=as.POSIXct('1979-01-02', tz='UTC')
stop=as.POSIXct('2017-01-01', tz='UTC')
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, sep=' ', fill=TRUE)
names(d) = c('datetime', var)
return(d)
}
d_list = lapply(pf_vars, dl_parse)
d_list[[1]]
head(d_list[[1]])
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, fill=TRUE)
names(d) = c('datetime', var)
return(d)
}
d_list = lapply(pf_vars, dl_parse)
head(d_list[[1]])
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, fill=TRUE)
names(d) = c('datetime', 'hour', var)
d$datetime = paste0(d$datetime, d$hour)
return(d)
}
dl_parse(pf_vars[1])
head(dl_parse(pf_vars[1]))
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, fill=TRUE)
names(d) = c('datetime', 'hour', var)
d$datetime = paste0(d$datetime, 'T', d$hour)
return(d)
}
head(dl_parse(pf_vars[1]))
tmp = dl_parse(pf_vars[1])
d = tmp
strptime(paste0(d$datetime, 'T', d$hour), '%Y-%m-%dT%H')
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, fill=TRUE)
names(d) = c('datetime', 'hour', var)
d$datetime = strptime(paste0(d$datetime, 'T', d$hour), '%Y-%m-%dT%H', tz='UTC')
return(d)
}
tmp = dl_parse(pf_vars[1])
head(tmp)
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, fill=TRUE)
names(d) = c('datetime', 'hour', var)
d$datetime = strptime(paste0(d$datetime, 'T', d$hour), '%Y-%m-%dT%H', tz='UTC')
d$hour = NULL
return(d)
}
head(dl_parse(pf_vars[1]))
?merge()
Reduce(d_list, merge)
?Reduce
Reduce(merge, d_list)
d_list = lapply(pf_vars, dl_parse)
head(d_list[[1]])
head(d_list[[2]])
pf_data = do.call(d_list, merge)
?Reduce
pf_data = Reduce(function(...){merge(..., all=T)}, d_list)
head(pf_data)
pf_data = Reduce(function(...){merge(..., by='datetime')}, d_list)
list
d_list
lapply(d_list, head)
merge(d_list[[1]], d_list[[2]])
?strptime
class(d_list[[1]]$datetime)
dl_parse = function(var){
durl = sprintf(url_pattern, var, lon, lat, format(start, '%Y-%m-%dT%H'), format(stop, '%Y-%m-%dT%H'))
r = RETRY('GET', durl)
d = read.table(text=content(r, 'text'), skip=40, header=TRUE, fill=TRUE)
names(d) = c('datetime', 'hour', var)
d$datetime = as.POSIXct(strptime(paste0(d$datetime, 'T', d$hour), '%Y-%m-%dT%H', tz='UTC'))
d$hour = NULL
return(d)
}
d_list = lapply(pf_vars, dl_parse)
pf_data = Reduce(function(...){merge(..., by='datetime')}, d_list)
library(data.table)
reshape::merge_all(d_list)
head(reshape::merge_all(d_list))
lapply(d_list, head)
reshape::merge_all(d_list)
head(reshape::merge_all(d_list))
head(reshape::merge_all(d_list), by='datetime')
reshape::merge_all(d_list)
Reduce(function(...){merge(..., by='datetime')}, d_list)
head(Reduce(function(...){merge(..., by='datetime')}, d_list))
pf_data = Reduce(function(...){merge(..., by='datetime')}, d_list)
